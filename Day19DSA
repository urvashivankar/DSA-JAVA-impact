DSA IN JAVA :7090
Algorithm: An algorithm is a step-by-step set of instructions used to solve a specific problem.
algorithms --> sorting,searching,greedy,dynamic,backtracking,recursion,tree traversal,dijistras,krushkals,prime,divide and conqure etc 

-->Time Complexity : is the amount of time an algorithm takes as a function of the input size (usually n).
   ignore smaller values, ignore constants, focus on worst case
   Goal: Measure how fast an algorithm runs when input gets large.
 to solve a problem we have 3 steps : 1)
                                     2)you will run one more for loop to get step 3
                                     3)you will write the code in constant if we analyze the code the 
time complexity will be n^2 for step 1 ,n for step 2,1 for the step 3
now to get the time complexity for the code we have to ignore constant,smaller values and the final t.c will be n^2
best case : Minimum time taken by the algorithm (ideal situation)	,
avg case :Expected time over all possible inputs
worst case : Maximum time taken (most difficult input),denoted by big O()	

-->Space Complexity is the amount of memory (RAM) an algorithm uses during execution,
if we use any extra space for solving the problem that extra space consider as space complexity
including:
Input size
Variables
Call stack (for recursion)
Data structures used (arrays, lists, etc.)
//data structure :
array list,linked list,hash set,hash map : mostly used 
array
string
stack and queue
trees
graphs
Linked list 

--> Linear : linked list,stack,queue
--> non-linear : trees,graphs,heaps

//LINKED LIST : collection of similar type of data in random allocation
-->Random allocation means the nodes of the linked list are not stored consecutively in memory like arrays.
Dynamic size (can grow or shrink during runtime)
Easy insertion/deletion compared to arrays (no need to shift elements)
No fixed size limit unlike arrays
-->Types :
 Singly Linked List :	Each node points only to the next node
 Doubly Linked List : Each node points to both the next and previous node
 Circular Linked List: The last node points back to the first node, making a circle
-->advantages of linked list : faster insertion and deletions
starting and ending point 
--> code snippet : class node{
                      int data;
                      node next;
                     }
-->so if we want to create object we want to call constructor which will give the output in this two forms  :
1)node should be created with data and address null
further we have to create constructor which helps to create node with data and address null
node(int data1){
 this.data=data;
 this.next=null;
}
2)
node(int data1,node next1){
  this.data=data1;
  this.next=next1;
}

 





